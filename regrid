#!/usr/bin/env python

# Helper method - get a model interface
def get_model_interface (model_name):
  import importlib
  # Try to find a module with the given name
  # Note: hyphens '-' are mangled to underscores '_' when looking for a module.
  model = importlib.import_module("products."+model_name.replace('-','_'))
  return model.interface

# Helper method - open the specified file(s) through the given model interface,
# and return a model data object.
# TODO: move this code out of here, so it can be shared by the diagnostic
#       package as well.
def read_model_data (model_name, files, manifest=None):
  from os.path import exists, isdir
  from glob import glob
  from data_interface import DataInterface
  import importlib
  interface = get_model_interface(model_name)
  if isinstance(files,(list,tuple)):
    pass  # Already parsed into a list of files
  elif isdir(files):
    files = interface.find_files(files)
  elif isinstance(files,str):
    file_pattern = files
    files = glob(file_pattern)
    if len(files) == 0:
      raise ValueError("No matches for '%s'."%file_pattern)
  else: raise ValueError("Invalid file argument '%s'"%files)
  for f in files:
    if not exists(f):
      raise ValueError("File '%s' does not exist."%f)
  #TODO: remove this call, once the manifest is changed to contain a simple model string instead of an opener function.
  opener = importlib.import_module("products."+model_name.replace('-','_')).open_file
  data = DataInterface.from_files(files, opener=opener, manifest=manifest)

  # Filter the data (get standard field names, etc.)
  data = data.filter(interface.decode)

  return data

# Helper method - write some data into file(s), using the specified model
# interface.
def write_model_data (model_name, dirname, datasets):
  from os.path import exists, isdir
  from os import makedirs
  # Try to find a module with the given name
  interface = get_model_interface(model_name)
  # Make sure we have a directory to put this.
  if not isdir(dirname):
    if exists (dirname):
      raise ValueError ("'%s' is not a directory."%dirname)
    else: makedirs(dirname)
  # Encode the data in a representation suitable for the given model type.
  datasets = map(interface.encode, datasets)

  # Write it out
  interface.write (datasets, dirname)



###########################
##### The main script #####
###########################

import argparse

# Parse the command-line arguments

parser = argparse.ArgumentParser(description="Converts model data from one format to another")
parser.add_argument ("--intype", help="The type of input data to read.", choices=["carbontracker","carbontracker-ch4","gem","eccas","eccas-flux"], required=True)
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument ("--infiles", help="The input file(s).", nargs='+', metavar="INFILE")
group.add_argument ("--indir", help="The input directory.  All relevant files from this directory are used.")
parser.add_argument ("--outtype", help="The type of output data to write.", choices=["gem","eccas","eccas-flux"], required=True)
parser.add_argument ("--gridfile", help="A file that contains the target grid to convert the data to.  Should be in the same format as the output.", required=True)
#parser.add_argument ("--gridvar", help="The variable in the --gridfile to use for the default target grid.  Only necessary if there is more than one set of coordinates in the --gridfile.")
parser.add_argument ("--outdir", help="The directory to write the output files.", required=True)
parser.add_argument ("--debug", help="Dump the full stack trace when there's an error.", action="store_true")

args = parser.parse_args()


# Try doing something
# Fail gracefully if there's a problem

try:

  # Get the target grid
  grid_data = read_model_data (args.outtype, args.gridfile)

  # Get the input data
  input_data = read_model_data (args.intype, args.infiles or args.indir)

  # Get the output interface
  out_interface = get_model_interface (args.outtype)

  data = input_data

  # Vertical regridding (keeping source surface pressure)
  from regrid_vert_wrapper import do_vertical_regridding
  data = do_vertical_regridding (data, grid_data, out_interface)

  #Horizontal regridding
  from regrid_horz_wrapper import do_horizontal_regridding
  data = do_horizontal_regridding (data, grid_data, out_interface)

  # Write the data out.
  write_model_data(args.outtype, args.outdir, data)

except Exception as e:
  from sys import exit
  if args.debug: raise
  print "Error: %s"%e
  exit(1)

