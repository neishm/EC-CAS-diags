#!/usr/bin/env python

from eccas_diags import interfaces

import argparse

# Custom action for collecting input arguments
class set_dictkey(argparse.Action):
  def __init__ (self, option_strings, dest, nargs=None, const=None, default={}, type=None, choices=None, required=False, help=None, metavar=None):
    super(set_dictkey, self).__init__ (option_strings, dest, nargs, const, default, type, choices, required, help, metavar)
  def __call__ (self, parser, namespace, values, option_string=None):
    setattr(namespace, self.dest+'_last_key', values)
class append_dictvalue(argparse.Action):
  def __call__ (self, parser, namespace, values, option_string=None):
    key = getattr(namespace, self.dest+'_last_key',None)
    d = getattr(namespace, self.dest)
    d.setdefault(key,[])
    if isinstance(values,list):
      d[key].extend(values)
    else:
      d[key].append(values)

# Parse the command-line arguments

valid_types = interfaces.table.keys()

parser = argparse.ArgumentParser(description="Converts model data from one format to another.", epilog="TYPE can be: "+', '.join(valid_types))
parser.add_argument ("--intype", help="The type of input data to read.", choices=valid_types, required=True, action=set_dictkey, metavar="TYPE", dest="input")
parser.add_argument ("--infiles", help="The input file(s), or an input directory.", nargs='+', required=True, action=append_dictvalue, metavar="FILE", dest="input")
parser.add_argument ("--fields", help="Restrict the regridding to the specified fields.")
parser.add_argument ("--outtype", help="The type of output data to write.", choices=valid_types, required=True, metavar="TYPE")
parser.add_argument ("--gridfiles", help="File(s) or directory that contains the target grid to convert the data to.  Should be in the same format as the output.", nargs='+', required=True, metavar="FILE")
parser.add_argument ("--sample-field", help="If multiple grids are defined in the grid files, then use the one for the specified field name.", metavar="NAME")
parser.add_argument ("--outdir", help="The directory to write the output files.", required=True)
parser.add_argument ("--use-target-time", help="Treat the input data as being valid at the first time in the target grid file.  Useful for generating initial conditions with data that comes from a different time period.", action="store_true")
parser.add_argument ("--select-date", help="Select the specified date from the input data.  Useful if you have an input with many years of data, and only want to create an initial condition file from one of those dates.", metavar="YYYY-MM-DD")
parser.add_argument ("--conserve-local-mass", help="Does a locally mass-conservative regridding.", action="store_true")
parser.add_argument ("--conserve-global-mass", help="Does a global adjustment to the regridded field to conserve total mass.", action="store_true")
parser.add_argument ("--debug", help="Print debugging messages.  Also, dump the full stack trace when there's an error.", action="store_true")

args = parser.parse_args()

# Try doing something
# Fail gracefully if there's a problem

import logging
if args.debug:
  logging.basicConfig(level=logging.DEBUG)
else:
  logging.basicConfig(level=logging.INFO)

try:

  # Get the target grid
  grid_data = interfaces.table[args.outtype](args.gridfiles,name='grid_data')

  # Collect all the input data for various sources
  from eccas_diags.interfaces import DataInterface
  input_data = []
  for intype, infiles in args.input.iteritems():
    if intype is None: raise ValueError("No type specified for files %s"%infiles)
    input_data.extend(interfaces.table[intype](infiles,name='input_data'))

  # Select a particular date from the inputs.
  if args.select_date is not None:
    year, month, day = map(int,args.select_date.split('-'))
    for i in range(len(input_data)):
      input_data[i] = input_data[i](year=year, month=month, day=day)

  # Force the input data to be valid at the target grid time?
  if args.use_target_time:
    from pygeode.dataset import Dataset
    gridtime = grid_data.datasets[0].time(i_time=0)
    logging.info("Forcing time: %s", gridtime)
    for i, dataset in enumerate(input_data):
      varlist = list(dataset)
      for j, var in enumerate(varlist):
        if var.hasaxis('time'):
          var = var(i_time=0).replace_axes(time=gridtime)
        else:
          var = var.extend(0,gridtime)
        varlist[j] = var
      input_data[i] = Dataset(varlist)

  # Subset the fields?
  if args.fields is not None:
    fields = args.fields.split(',')
    datasets = []
    for i, dataset in enumerate(input_data):
      dataset = [v for v in dataset if v.name in fields]
      if len(dataset) == 0: continue
      datasets.append(Dataset(dataset))
    input_data = datasets

  input_data = DataInterface(input_data)

  # Get the output interface
  out_interface = interfaces.table[args.outtype]

  data = input_data


  # Vertical regridding (keeping source surface pressure)
  from eccas_diags.regrid_vert_wrapper import do_vertical_regridding
  data = do_vertical_regridding (data, grid_data, conserve_mass=args.conserve_local_mass, sample_field=args.sample_field)


  # Horizontal regridding
  from eccas_diags.regrid_horz_wrapper import do_horizontal_regridding
  data = do_horizontal_regridding (data, grid_data, conserve_mass=args.conserve_local_mass, sample_field=args.sample_field)


  # Add some mass-related fields from the grid file (for unit conversion).
  dataset = data.datasets[0]
  for varname in 'dry_air', 'dp', 'cell_area', 'gravity':
    if grid_data.have(varname):
      assert varname not in data
      if args.sample_field is not None:
        sample, extra = grid_data.find_best([args.sample_field,varname])
      else:
        extra = grid_data.find_best(varname)
      # Certain fields are assumed to be time independent, so the
      # time axis does not have to match the input field(s).
      if extra.name in ('cell_area','gravity') and extra.hasaxis('time'):
        extra = extra(i_time=0).squeeze('time')
      dataset += extra
    else:
      logging.debug("Can't find '%s' in grid file.", varname)
  data = DataInterface([dataset])

  # Strip out any semi-dry air references.
  # Otherwise, we calculate the uncorrected mass the wrong way
  # (using moist-air units instead of dry-air).
  for var in data.datasets[0]:
    var.atts['units'] = var.atts['units'].replace('(semidry_air)','(dry_air)')

  # Apply a global adjustment to conserve mass
  from eccas_diags.regrid_fix_mass import global_scale
  if args.conserve_global_mass:
    data = global_scale (data, input_data, grid_data)

  # Write the data out.
  out_interface.write(data, args.outdir)

except Exception as e:
  from sys import exit
  if args.debug: raise
  print "Error: %s"%e
  exit(1)

